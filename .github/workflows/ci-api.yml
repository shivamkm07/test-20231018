name: ci-api

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: 'Environment'
        required: false
  push:
    branches: [main, release-preview, release-qa, develop]
    paths:
      - 'src/*.Api/**'

env:
  version: '1.0'
  productionBranch: 'main'
  stagingBranch: 'release-preview'
  testingBranch: 'release-qa'
  integrationBranch: 'develop'

defaults:
  run:
    shell: bash

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  build:
    if: contains(toJson(github.event.commits), '[skip ci]') == false
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      DOTNET_NOLOGO: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      IMAGE-SUFFIX: api
      IMAGE: empty
      REGISTRY: ${{secrets.AZURE_CONTAINERREGISTRY}}
      buildConfiguration: 'Release'
      projectPath: './src/HelloDapr.Api'
    environment: ${{github.event.inputs.environment}}
    outputs:
      version: ${{env.version}}
      repository: ${{steps.extract_metadata.outputs.repository}}
      branch: ${{steps.extract_metadata.outputs.branch}}
      isProduction: ${{steps.extract_metadata_environment.outputs.isProduction}}
      isStaging: ${{steps.extract_metadata_environment.outputs.isStaging}}
      isTesting: ${{steps.extract_metadata_environment.outputs.isTesting}}
      isIntegration: ${{steps.extract_metadata_environment.outputs.isIntegration}}
      isDevelopment: ${{steps.extract_metadata_environment.outputs.isDevelopment}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract metadata
        id: extract_metadata
        shell: pwsh
        run: |
          $branch = "$env:GITHUB_REF" -replace 'refs/heads/', ''
          Add-Content $env:GITHUB_OUTPUT "branch=$branch"
          Add-Content $env:GITHUB_OUTPUT "branchsafe=$($branch -replace '/', '-')"
          Add-Content $env:GITHUB_OUTPUT "repository=$($env:GITHUB_REPOSITORY -replace '.*/', '')"
          Add-Content $env:GITHUB_ENV "version=$env:version.$env:GITHUB_RUN_NUMBER"

      - name: Extract metadata environment
        id: extract_metadata_environment
        shell: pwsh
        run: |
          $isProduction = 0
          $isStaging = 0
          $isTesting = 0
          $isIntegration = 0
          $isDevelopment = 0
          $environment = "";
          $branch = "${{steps.extract_metadata.outputs.branch}}"

          if ($branch -eq "${{env.productionBranch}}" -or "${{github.event.inputs.environment}}" -eq "production") {
            $isProduction = 1;
            $environment = "production2";
          }
          elseif ($branch -eq  "${{env.stagingBranch}}" -or "${{github.event.inputs.environment}}" -eq "staging") {
            $isStaging = 1;
            $versionSuffix = "preview";
            $environment = "staging";
          }
          elseif ($branch -eq "${{env.testingBranch}}" -or "${{github.event.inputs.environment}}" -eq "testing") {
            $isTesting = 1;
            $versionSuffix = "qa";
            $environment = "testing";
          }
          elseif ($branch -eq "${{env.integrationBranch}}" -or "${{github.event.inputs.environment}}" -eq "integration") {
            $isIntegration = 1;
            $versionSuffix = "develop";
            $environment = "integration";
          }
          else {
            $isDevelopment = 1
            $versionSuffix = "dev"
            $environment = "development";
          }

          if ($versionSuffix) {
            $version = "$env:version-$versionSuffix"
          } else {
            $version = $env:version
          }

          Add-Content $env:GITHUB_OUTPUT "isProduction=$isProduction"
          Add-Content $env:GITHUB_OUTPUT "isStaging=$isStaging"
          Add-Content $env:GITHUB_OUTPUT "isTesting=$isTesting"
          Add-Content $env:GITHUB_OUTPUT "isIntegration=$isIntegration"
          Add-Content $env:GITHUB_OUTPUT "isDevelopment=$isDevelopment"
          Add-Content $env:GITHUB_OUTPUT "environment=$environment"
          Add-Content $env:GITHUB_ENV "version=$version"

      - name: Initial modifications
        shell: pwsh
        run: |
            Write-Output "1. Set IMAGE variable";
            $lowerCaseValue = "${{env.REGISTRY}}/${{steps.extract_metadata.outputs.repository}}.${{env.IMAGE-SUFFIX}}".ToLower();
            Add-Content $env:GITHUB_ENV "IMAGE=$lowerCaseValue";
            Write-Output "2. Generate BuildInfo file"
            $buildInfo = "${{steps.extract_metadata.outputs.repository}}_${{steps.extract_metadata.outputs.branch}}:${{env.GITHUB_SHA}}`nv${{env.version}}"
            $buildInfo | Out-File -FilePath "${{env.projectPath}}/Resources/BuildInfo.txt"
            Write-Output $buildInfo

      - name: Build
        run: |
          docker build -t $IMAGE:$GITHUB_SHA \
            -t $IMAGE:${{env.version}} \
            -t $IMAGE:latest \
            -f $projectPath/Dockerfile \
            --build-arg VERSION="${{env.version}}" .

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true

      - name: Log in to container registry
        run: |
          # echo "${{secrets.AZURE_CONTAINERREGISTRY_CREDENTIALS}}" | docker login ${{env.REGISTRY}} -u "github" --password-stdin
          az acr login --name ${{env.REGISTRY}}

      - name: Publish
        run: |
          docker push $IMAGE:$GITHUB_SHA
          docker push $IMAGE:${{env.version}}
          docker push $IMAGE:latest

      - name: Create tag
        # if: steps.extract_metadata_environment.outputs.isProduction == falee
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{env.version}}',
              sha: context.sha
            })

      - name: Create Release
        if: steps.extract_metadata_environment.outputs.isProduction == true
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: v${{env.version}}
          name: ${{github.workflow}}.${{env.version}}
          draft: false
          prerelease: false
      #     body: |
      #       [Changelog](https://github.com/${{github.repository}}/blob/${{steps.extract_metadata.outputs.branch}}/CHANGELOG.md)
      #     files: |
      #       ${{env.packageOutputPath}}/*.nupkg

      - name: Update container app
        shell: pwsh
        run: |
          az containerapp update -g "${{vars.CONTAINER_APP_NAME_PREFIX}}-${{steps.extract_metadata_environment.outputs.environment}}" -n "${{vars.CONTAINER_APP_NAME_PREFIX}}-${{env.IMAGE-SUFFIX}}" --image "${{env.IMAGE}}:${{env.version}}";
          $manifests = az acr manifest list-metadata --registry "${{env.REGISTRY}}" --name "${{env.CONTAINER_REPOSITORY_NAME}}" -o json | ConvertFrom-Json; if ($manifests.Length -gt 1) { $manifests | Sort-Object createdTime | Select-Object -SkipLast 1 | ForEach-Object { az acr manifest delete --registry "${{env.REGISTRY}}" --name ("${{env.CONTAINER_REPOSITORY_NAME}}@" + $_.digest) --yes } };
        env:
          CONTAINER_REPOSITORY_NAME: "${{steps.extract_metadata.outputs.repository}}.${{env.IMAGE-SUFFIX}}"

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
